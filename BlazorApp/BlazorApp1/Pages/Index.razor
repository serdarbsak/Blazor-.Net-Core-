@page "/"

@using DemoModels.CustomModels;
@using BlazorApp1.Services;
@inject IEmpService empService;
@inject IJSRuntime JSRuntime;

<PageTitle>Index</PageTitle>

<EditForm Model="@employee">
    <table class="table table-striped table-bordered bg-gradient">
        <tr>
            <td>Name</td>
            <td>
                <InputText @bind-Value="employee.Name" class="form-control" />
            </td>
        </tr>
        <tr>
            <td>Surname</td>
            <td>
                <InputText @bind-Value="employee.Surname" class="form-control" />
            </td>
        </tr>
        <tr>
            <td>Phone</td>
            <td>
                <InputText @bind-Value="employee.Phone" class="form-control" />
            </td>
        </tr>
        <tr>
            <td>Company</td>
            <td>
                <InputText @bind-Value="employee.Company" class="form-control" />
            </td>
        </tr>
        <tr>
            <td>
                <input type="button" class="btn btn-primary col-lg-12" style="background-color:#05163d9c" value="Add" @onclick="AddNewEmployee" />
            </td>
        </tr>
    </table>
</EditForm>


@code {
    private Employee employee = new Employee();
    private List<Employee> empList = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        await GetEmployees();
    }

    private async Task GetEmployees()
    {
        empList = await empService.GetEmployees();
    }

    public async void AddNewEmployee()
    {
        var response = await empService.AddNewEmployee(employee);
        if (response != null)
        {
            await GetEmployees();
            await Alert("Employee Added Successfully");
            this.StateHasChanged();
        }
    }

    public async void UpdateClick(Employee employee)
    {
        var response = await empService.UpdateEmployee(employee);
        if (response != null)
        {
            await GetEmployees();
            await Alert("Employee Updated Successfully");
            this.StateHasChanged();
        }
    }

    public async void DeleteClick(int employeeId)
    {
        var response = await empService.DeleteEmployee(employeeId);
        if (response != null)
        {
            await GetEmployees();
            await Alert("Employee Deleted Successfully");
            this.StateHasChanged();
        }
    }

    private async Task Alert(string Message)
    {
        await JSRuntime.InvokeAsync<object>("Alert", Message);
    }

}
